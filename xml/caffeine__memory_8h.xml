<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="caffeine__memory_8h" kind="file" language="C++">
    <compoundname>caffeine_memory.h</compoundname>
    <includes refid="caffeine__flags_8h" local="yes">caffeine_flags.h</includes>
    <includes local="no">malloc.h</includes>
    <includes local="no">memory.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>malloc.h</label>
      </node>
      <node id="4">
        <label>memory.h</label>
      </node>
      <node id="1">
        <label>caffeine_memory.h</label>
        <link refid="caffeine__memory_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>caffeine_flags.h</label>
        <link refid="caffeine__flags_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="structAllocatorInterface__s" prot="public">AllocatorInterface_s</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" prot="public" static="no">
        <type>struct <ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface_s</ref></type>
        <definition>typedef struct AllocatorInterface_s AllocatorInterface</definition>
        <argsstring></argsstring>
        <name>AllocatorInterface</name>
        <briefdescription>
<para>A syntax sugar for struct <ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines an interface to standardize custom allocators implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="1" column="0" bodyfile="headers/caffeine_memory.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Memory_1gaaccf8c924a13e92120e947e5914fd579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * cff_allocator_alloc</definition>
        <argsstring>(AllocatorInterface *allocator, size_t size)</argsstring>
        <name>cff_allocator_alloc</name>
        <param>
          <type><ref refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" kindref="member">AllocatorInterface</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>A function to allocate memory using an AllocatorInterface. </para>
        </briefdescription>
        <detaileddescription>
<para>This funcion calls the allocator alloc function passing the necessary parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an AllocatorInterface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of memory block to be allocated in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the allocated memory block or null in failure cases. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="93" column="6" declfile="headers/caffeine_memory.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga2c0579d7e1221998f9aa469414b02135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cff_allocator_realloc</definition>
        <argsstring>(AllocatorInterface *allocator, void *ptr, size_t size, void **out)</argsstring>
        <name>cff_allocator_realloc</name>
        <param>
          <type><ref refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" kindref="member">AllocatorInterface</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>A function to reallocate memory using an AllocatorInterface. </para>
        </briefdescription>
        <detaileddescription>
<para>This funcion calls the allocator realloc function passing the necessary parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an AllocatorInterface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block that will be reallocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size for the memory block in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the memory block after reallocated or to null in failure case. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in failure case or 1 in sucess case. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="108" column="5" declfile="headers/caffeine_memory.h" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga979ab4ea6acac240194b25800bfd3ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_allocator_free</definition>
        <argsstring>(AllocatorInterface *allocator, void *ptr)</argsstring>
        <name>cff_allocator_free</name>
        <param>
          <type><ref refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" kindref="member">AllocatorInterface</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>A function to deallocate memory using an AllocatorInterface. </para>
        </briefdescription>
        <detaileddescription>
<para>This funcion calls the allocator dealloc function passing the necessary parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an AllocatorInterface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block that will be deallocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="120" column="6" declfile="headers/caffeine_memory.h" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga61f19c0d35c8fe341e799ad5b98512cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cff_allocator_mem_size</definition>
        <argsstring>(AllocatorInterface *allocator, void *ptr)</argsstring>
        <name>cff_allocator_mem_size</name>
        <param>
          <type><ref refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" kindref="member">AllocatorInterface</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>A function that gets the size of an allocated block. </para>
        </briefdescription>
        <detaileddescription>
<para>This funcion calls the allocator get_size function passing the necessary parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an AllocatorInterface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the block in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="133" column="8" declfile="headers/caffeine_memory.h" declline="133" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga7e877bdff45190aae9631afc417aa770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" kindref="member">AllocatorInterface</ref> *</type>
        <definition>AllocatorInterface * cff_get_default_allocator</definition>
        <argsstring>()</argsstring>
        <name>cff_get_default_allocator</name>
        <briefdescription>
<para>Utility function that provides a pointer to the default memory allocator in the process. </para>
        </briefdescription>
        <detaileddescription>
<para>By default this function will return a pointer to an allocator interface that uses the functions provided by the libc (eg. malloc, realloc and free). The default allocator can be changed using the </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="145" column="20" declfile="headers/caffeine_memory.h" declline="145" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gae6df5a128cc2f599951fadf5c488d92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_set_default_allocator</definition>
        <argsstring>(AllocatorInterface *allocator)</argsstring>
        <name>cff_set_default_allocator</name>
        <param>
          <type><ref refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" kindref="member">AllocatorInterface</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Utility function that provides a pointer to the default memory allocator in the process. </para>
        </briefdescription>
        <detaileddescription>
<para>By default this function will return a pointer to an allocator interface that uses the functions provided by the libc (eg. malloc, realloc and free). The default allocator can be changed using the </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="157" column="6" declfile="headers/caffeine_memory.h" declline="157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga5c01abf99f1adb5c8d9c0aab4993ae40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * cff_heap_alloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>cff_heap_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates a memory block using the libc malloc function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of block to be allocated in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the allocated memory block or null in failure cases.</para>
</simplesect>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="169" column="6" declfile="headers/caffeine_memory.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga49aada1415e48822c27fbe4301466386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cff_heap_realloc</definition>
        <argsstring>(void *ptr, size_t size, void **out)</argsstring>
        <name>cff_heap_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Reallocates a memory block using the libc realloc function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block that will be reallocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size for the memory block in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the memory block after reallocated or to null in failure case. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in failure case or 1 in sucess case.</para>
</simplesect>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="183" column="5" declfile="headers/caffeine_memory.h" declline="183" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga6b117b042990752ddc6b92a6de2e946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_heap_alloc_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>cff_heap_alloc_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Releases a memory block using the libc free function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block that will be deallocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="194" column="6" declfile="headers/caffeine_memory.h" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gab0108b146a32a216acc45e67da082452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * cff_stack_alloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>cff_stack_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates a memory block on stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of block to be allocated in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the allocated memory block or null in failure cases.</para>
</simplesect>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="206" column="6" declfile="headers/caffeine_memory.h" declline="206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaf49b63a4451c349ef8f63b8a86410990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cff_stack_realloc</definition>
        <argsstring>(void *ptr, size_t old_size, size_t size, void **out)</argsstring>
        <name>cff_stack_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>old_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Reallocates a memory block on stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Internally, this function will allocate a new block on stack, copy the data from old block to the new and try to dealloc the old block, be aware that some runtimes doesn&apos;t allow manually stack release, in such cases both memory blocks will be allocated until the end of scope.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block that will be reallocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size for the memory block in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the memory block after reallocated or to null in failure case. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in failure case or 1 in sucess case.</para>
</simplesect>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="223" column="5" declfile="headers/caffeine_memory.h" declline="223" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga3a061df742a844aa0bbb3487f4962705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_stack_alloc_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>cff_stack_alloc_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Releases a memory block on stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Be aware that some runtimes doesn&apos;t allow manually stack release, in such cases this function does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block that will be deallocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="236" column="6" declfile="headers/caffeine_memory.h" declline="236" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga6b9ab770651d550cd2548265ece17cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cff_mem_size</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>cff_mem_size</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>A function that gets the size of an allocated block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the block in bytes.</para>
</simplesect>
<simplesect kind="warning"><para>The function called depends on the compiler used and target operating system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="248" column="8" declfile="headers/caffeine_memory.h" declline="248" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga9e9d9280f86864f85ec68406a5e9b9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>cff_memcmp</definition>
        <argsstring>(const void *a, const void *b, size_t size)</argsstring>
        <name>cff_memcmp</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicates if a sequence of bytes from two adress have the same value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an adress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an adress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of sequence to be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if are equals and 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="260" column="5" declfile="headers/caffeine_memory.h" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga6e3a3426c9610dfd1397d12838560f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memcpy</definition>
        <argsstring>(const void *const src, void *const dest, size_t src_size, size_t dest_size)</argsstring>
        <name>cff_memcpy</name>
        <param>
          <type>const void *const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dest_size</declname>
        </param>
        <briefdescription>
<para>Copy a sequence of bytes from src to dest. </para>
        </briefdescription>
        <detaileddescription>
<para>If the dest and src buffers overlaps use the cff_memmove instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes that will be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest_size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes of the block that will receive the copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="274" column="6" declfile="headers/caffeine_memory.h" declline="274" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad6a6a44fbe82e8a94581c78788117237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memmove</definition>
        <argsstring>(const void *const src, void *const dest, size_t src_size, size_t dest_size)</argsstring>
        <name>cff_memmove</name>
        <param>
          <type>const void *const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dest_size</declname>
        </param>
        <briefdescription>
<para>Moves a sequence of bytes from src to dest. </para>
        </briefdescription>
        <detaileddescription>
<para>Better option when the src and dest buffer overlaps.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes that will be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest_size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes of the block that will receive the copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="288" column="6" declfile="headers/caffeine_memory.h" declline="288" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gabd76bcd3d6736ee62e1c24f020426b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memset</definition>
        <argsstring>(void *dest, int value, size_t size)</argsstring>
        <name>cff_memset</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets all values of an memory block to a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be setted in every byte of the block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes to be setted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="299" column="6" declfile="headers/caffeine_memory.h" declline="299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga218e303b8bc16cb29424a87793eac95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cff_memcmp_8</definition>
        <argsstring>(const void *const a, const void *const b, size_t size)</argsstring>
        <name>cff_memcmp_8</name>
        <param>
          <type>const void *const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicates if a sequence of bytes from two adress have the same value 8 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of sequence to be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if are equals and 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="311" column="5" declfile="headers/caffeine_memory.h" declline="311" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga2961128d7e32b4be2947c8e5c699ba6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>cff_memcmp_16</definition>
        <argsstring>(const void *const a, const void *const b, size_t size)</argsstring>
        <name>cff_memcmp_16</name>
        <param>
          <type>const void *const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicates if a sequence of bytes from two adress have the same value 16 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of sequence to be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if are equals and 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="323" column="5" declfile="headers/caffeine_memory.h" declline="323" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaefe32578a5c13aae86c1343bfee710b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>cff_memcmp_32</definition>
        <argsstring>(const void *const a, const void *const b, size_t size)</argsstring>
        <name>cff_memcmp_32</name>
        <param>
          <type>const void *const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicates if a sequence of bytes from two adress have the same value 32 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of sequence to be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if are equals and 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="335" column="5" declfile="headers/caffeine_memory.h" declline="335" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga0b05c6c11bba139ee2f70420f8957cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>cff_memcmp_64</definition>
        <argsstring>(const void *const a, const void *const b, size_t size)</argsstring>
        <name>cff_memcmp_64</name>
        <param>
          <type>const void *const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicates if a sequence of bytes from two adress have the same value 64 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of sequence to be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if are equals and 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="347" column="5" declfile="headers/caffeine_memory.h" declline="347" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga1de69c3a155909468ef291bdc829dc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memcpy_8</definition>
        <argsstring>(const void *const src, void *const dest, size_t size)</argsstring>
        <name>cff_memcpy_8</name>
        <param>
          <type>const void *const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy a sequence of bytes from src to dest 8 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para>If the dest and src buffers overlaps use the cff_memmove instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes that will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="360" column="6" declfile="headers/caffeine_memory.h" declline="360" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad468d324fac5c33fb8face5a53077e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memcpy_16</definition>
        <argsstring>(const void *const src, void *const dest, size_t size)</argsstring>
        <name>cff_memcpy_16</name>
        <param>
          <type>const void *const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy a sequence of bytes from src to dest 16 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para>If the dest and src buffers overlaps use the cff_memmove instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes that will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="373" column="6" declfile="headers/caffeine_memory.h" declline="373" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaaee1f881d66530582a85576f574c20b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memcpy_32</definition>
        <argsstring>(const void *const src, void *const dest, size_t size)</argsstring>
        <name>cff_memcpy_32</name>
        <param>
          <type>const void *const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy a sequence of bytes from src to dest 32 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para>If the dest and src buffers overlaps use the cff_memmove instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes that will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="386" column="6" declfile="headers/caffeine_memory.h" declline="386" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga3388ff2de7f5be41ba8f16b50fa32ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memcpy_64</definition>
        <argsstring>(const void *const src, void *const dest, size_t size)</argsstring>
        <name>cff_memcpy_64</name>
        <param>
          <type>const void *const</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy a sequence of bytes from src to dest 64 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para>If the dest and src buffers overlaps use the cff_memmove instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress of the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">des</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the adress that will receive the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes that will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="399" column="6" declfile="headers/caffeine_memory.h" declline="399" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga2435b5ed5edcc3625a0ec8305c21b759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memset_8</definition>
        <argsstring>(void *const dest, char value, size_t size)</argsstring>
        <name>cff_memset_8</name>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets all values of an memory block to a value 8 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be setted in every byte of the block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes to be setted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="410" column="6" declfile="headers/caffeine_memory.h" declline="410" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaa17df1fd696d59eef769f7bb2d33cc9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memset_16</definition>
        <argsstring>(void *const dest, short value, size_t size)</argsstring>
        <name>cff_memset_16</name>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets all values of an memory block to a value 16 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be setted in every byte of the block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes to be setted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="421" column="6" declfile="headers/caffeine_memory.h" declline="421" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gadf67e79f9c78ca3fc8463712522d20f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memset_32</definition>
        <argsstring>(void *const dest, int value, size_t size)</argsstring>
        <name>cff_memset_32</name>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets all values of an memory block to a value 32 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be setted in every byte of the block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes to be setted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="432" column="6" declfile="headers/caffeine_memory.h" declline="432" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gab20903b42f22118605a60452eb93df5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cff_memset_64</definition>
        <argsstring>(void *const dest, long long int value, size_t size)</argsstring>
        <name>cff_memset_64</name>
        <param>
          <type>void *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets all values of an memory block to a value 64 bits at a time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be setted in every byte of the block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>lenght of bytes to be setted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_memory.h" line="443" column="6" declfile="headers/caffeine_memory.h" declline="443" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines abstractions for common memory related functions. </para>
    </briefdescription>
    <detaileddescription>
<para>This module declares functions for dynamic memory management either on heap or stack, also defines an interface for custom memory allocators. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#ifndef<sp/>CAFFEINE_MEMORY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAFFEINE_MEMORY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;caffeine_flags.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;malloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structAllocatorInterface__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface_s</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structAllocatorInterface__s_1a1855c1a93794bd338c42454e08a82563" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*alloc)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structAllocatorInterface__s_1aea6f275096ca4e511c1fbe3babd54047" kindref="member">context</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structAllocatorInterface__s_1a6a84cf495d2e52a254626826f2fce92d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*realloc)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structAllocatorInterface__s_1aea6f275096ca4e511c1fbe3babd54047" kindref="member">context</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structAllocatorInterface__s_1a40c6069c89970183f04e7928ff944447" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structAllocatorInterface__s_1a40c6069c89970183f04e7928ff944447" kindref="member">free</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structAllocatorInterface__s_1aea6f275096ca4e511c1fbe3babd54047" kindref="member">context</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structAllocatorInterface__s_1a6f4b448c1e09551737aa5afa0382d8a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>size_t(*<ref refid="structAllocatorInterface__s_1a6f4b448c1e09551737aa5afa0382d8a3" kindref="member">get_size</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structAllocatorInterface__s_1aea6f275096ca4e511c1fbe3babd54047" kindref="member">context</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structAllocatorInterface__s_1aea6f275096ca4e511c1fbe3babd54047" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structAllocatorInterface__s_1aea6f275096ca4e511c1fbe3babd54047" kindref="member">context</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group__Memory_1ga445f854a7fb44af7fd6911674d5aaf03" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface_s</ref><sp/><ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="group__Memory_1gaaccf8c924a13e92120e947e5914fd579" kindref="member">cff_allocator_alloc</ref>(<ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga2c0579d7e1221998f9aa469414b02135" kindref="member">cff_allocator_realloc</ref>(<ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>out);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga979ab4ea6acac240194b25800bfd3ebb" kindref="member">cff_allocator_free</ref>(<ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga61f19c0d35c8fe341e799ad5b98512cd" kindref="member">cff_allocator_mem_size</ref>(<ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>*<sp/><ref refid="group__Memory_1ga7e877bdff45190aae9631afc417aa770" kindref="member">cff_get_default_allocator</ref>();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gae6df5a128cc2f599951fadf5c488d92a" kindref="member">cff_set_default_allocator</ref>(<ref refid="structAllocatorInterface__s" kindref="compound">AllocatorInterface</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="group__Memory_1ga5c01abf99f1adb5c8d9c0aab4993ae40" kindref="member">cff_heap_alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga49aada1415e48822c27fbe4301466386" kindref="member">cff_heap_realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>out);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga6b117b042990752ddc6b92a6de2e946b" kindref="member">cff_heap_alloc_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="group__Memory_1gab0108b146a32a216acc45e67da082452" kindref="member">cff_stack_alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gaf49b63a4451c349ef8f63b8a86410990" kindref="member">cff_stack_realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>out);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga3a061df742a844aa0bbb3487f4962705" kindref="member">cff_stack_alloc_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga6b9ab770651d550cd2548265ece17cf2" kindref="member">cff_mem_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga9e9d9280f86864f85ec68406a5e9b9e8" kindref="member">cff_memcmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga6e3a3426c9610dfd1397d12838560f07" kindref="member">cff_memcpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dest_size);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gad6a6a44fbe82e8a94581c78788117237" kindref="member">cff_memmove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dest_size);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gabd76bcd3d6736ee62e1c24f020426b26" kindref="member">cff_memset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga218e303b8bc16cb29424a87793eac95c" kindref="member">cff_memcmp_8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga2961128d7e32b4be2947c8e5c699ba6b" kindref="member">cff_memcmp_16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gaefe32578a5c13aae86c1343bfee710b9" kindref="member">cff_memcmp_32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga0b05c6c11bba139ee2f70420f8957cc1" kindref="member">cff_memcmp_64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga1de69c3a155909468ef291bdc829dc6e" kindref="member">cff_memcpy_8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gad468d324fac5c33fb8face5a53077e7d" kindref="member">cff_memcpy_16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gaaee1f881d66530582a85576f574c20b5" kindref="member">cff_memcpy_32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga3388ff2de7f5be41ba8f16b50fa32ae7" kindref="member">cff_memcpy_64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1ga2435b5ed5edcc3625a0ec8305c21b759" kindref="member">cff_memset_8</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gaa17df1fd696d59eef769f7bb2d33cc9a" kindref="member">cff_memset_16</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gadf67e79f9c78ca3fc8463712522d20f4" kindref="member">cff_memset_32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Memory_1gab20903b42f22118605a60452eb93df5f" kindref="member">cff_memset_64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dest,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="headers/caffeine_memory.h"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="caffeine__types_8h" kind="file" language="C++">
    <compoundname>caffeine_types.h</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__Types_1ga2b38307e7e9df7912aa212064d1f898e" prot="public" static="no" strong="no">
        <type></type>
        <name>cff_comparer_value_e</name>
        <enumvalue id="group__Types_1ga2b38307e7e9df7912aa212064d1f898eaac914834d207316d56824880a5c042d1" prot="public">
          <name>CFF_NOT_EQUAL</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>The values are not equals and does not have any ordering relation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__Types_1ga2b38307e7e9df7912aa212064d1f898ea71074c66685f83c7aa08396de3929fd3" prot="public">
          <name>CFF_LESS</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>The value is smaller than its comparison. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__Types_1ga2b38307e7e9df7912aa212064d1f898ea5c35dcab55a51eefe36cd3babaa08360" prot="public">
          <name>CFF_EQUALS</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The values are equals. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__Types_1ga2b38307e7e9df7912aa212064d1f898ea08a1c7db0fccff6ba280d6da1046f857" prot="public">
          <name>CFF_GREATER</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The value is greater than its comparison. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An Enum that represents a comparation betwen two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="16" column="1" bodyfile="headers/caffeine_types.h" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175" prot="public" static="no" strong="no">
        <type></type>
        <name>cff_error_value_e</name>
        <enumvalue id="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175af70c25cc3771bbbe73381bce31382e6d" prot="public">
          <name>CFF_NONE_ERR</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Any error ocurred. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175a6b97868fe63114ed06d50cfaf9db7dd8" prot="public">
          <name>CFF_ALLOC_ERR</name>
          <briefdescription>
<para>A request for memory allocation returned NULL. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175ab363247f070ea03aeeb42982d4ca3e44" prot="public">
          <name>CFF_REALLOC_ERR</name>
          <briefdescription>
<para>A request for memory reallocation returned NULL. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An Enum that represents a caffeine error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="29" column="1" bodyfile="headers/caffeine_types.h" bodystart="29" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__Types_1ga2a069d536144f7ed422fd651850a99f1" prot="public" static="no">
        <type>enum <ref refid="group__Types_1ga2b38307e7e9df7912aa212064d1f898e" kindref="member">cff_comparer_value_e</ref></type>
        <definition>typedef enum cff_comparer_value_e cff_cmp_e</definition>
        <argsstring></argsstring>
        <name>cff_cmp_e</name>
        <briefdescription>
<para>A syntax sugar for enum cff_comparer_value_e. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="1" column="0" bodyfile="headers/caffeine_types.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__Types_1ga42a29677c3d6f10a1fdb01da0a60e7c8" prot="public" static="no">
        <type>enum <ref refid="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175" kindref="member">cff_error_value_e</ref></type>
        <definition>typedef enum cff_error_value_e cff_err_e</definition>
        <argsstring></argsstring>
        <name>cff_err_e</name>
        <briefdescription>
<para>A syntax sugar for enum cff_error_value_e. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="1" column="0" bodyfile="headers/caffeine_types.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__Types_1gab26febf6fafe6351c9d422a8bbbb6e5b" prot="public" static="no">
        <type><ref refid="group__Types_1ga2a069d536144f7ed422fd651850a99f1" kindref="member">cff_cmp_e</ref>(*</type>
        <definition>typedef cff_cmp_e(* comparer_fn) (const void *const a_ptr, const void *const b_ptr, uint64_t data_size)</definition>
        <argsstring>)(const void *const a_ptr, const void *const b_ptr, uint64_t data_size)</argsstring>
        <name>comparer_fn</name>
        <briefdescription>
<para>A callback type for value comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is usefull to standardize a generic value comparison routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for a value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for a value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the two values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an cff_cmp_e that represents the comparison betwen the values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="62" column="9" bodyfile="headers/caffeine_types.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__Types_1gaf1bbe84c3e7e783d9fd976c00662334b" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* filter_fn) (const void *const data_ptr, uint64_t index, uint64_t data_size)</definition>
        <argsstring>)(const void *const data_ptr, uint64_t index, uint64_t data_size)</argsstring>
        <name>filter_fn</name>
        <briefdescription>
<para>A callback type for collection filtering. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is usefull to standardize a generic collection filtering routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for a value that will be analyzed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the value inside the collection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean that indicates if the current value passed in the filter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="75" column="9" bodyfile="headers/caffeine_types.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__Types_1ga71be8e2d77fbfc376de38fef2a37f33a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* map_fn) (const void *const from_ptr, void *to_ptr, uint64_t index)</definition>
        <argsstring>)(const void *const from_ptr, void *to_ptr, uint64_t index)</argsstring>
        <name>map_fn</name>
        <briefdescription>
<para>A callback type for collection transformation. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is usefull to standardize a generic collection transformation routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">from_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for an initial value before transformation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">to_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for a memory block that will receive the transformation result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the value inside the collection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="87" column="9" bodyfile="headers/caffeine_types.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__Types_1ga80ec97ee8f8741ad8177070fbf454ac2" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* foreach_fn) (void *data_ptr, uint64_t index)</definition>
        <argsstring>)(void *data_ptr, uint64_t index)</argsstring>
        <name>foreach_fn</name>
        <briefdescription>
<para>A callback type for collection transformation. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is usefull to standardize a generic routine that will be run to every collection element.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer for a value that will be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the value inside an collection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="headers/caffeine_types.h" line="99" column="9" bodyfile="headers/caffeine_types.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines common types used by the caffeine libraries. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="group__Types_1ga2a069d536144f7ed422fd651850a99f1" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CAFFEINE_TYPES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAFFEINE_TYPES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="group__Types_1ga2b38307e7e9df7912aa212064d1f898e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__Types_1ga2b38307e7e9df7912aa212064d1f898e" kindref="member">cff_comparer_value_e</ref><sp/>{</highlight></codeline>
<codeline lineno="17" refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898eaac914834d207316d56824880a5c042d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898eaac914834d207316d56824880a5c042d1" kindref="member">CFF_NOT_EQUAL</ref><sp/>=<sp/>-2,<sp/></highlight></codeline>
<codeline lineno="18" refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898ea71074c66685f83c7aa08396de3929fd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898ea71074c66685f83c7aa08396de3929fd3" kindref="member">CFF_LESS</ref><sp/>=<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="19" refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898ea5c35dcab55a51eefe36cd3babaa08360" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898ea5c35dcab55a51eefe36cd3babaa08360" kindref="member">CFF_EQUALS</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="20" refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898ea08a1c7db0fccff6ba280d6da1046f857" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga2b38307e7e9df7912aa212064d1f898ea08a1c7db0fccff6ba280d6da1046f857" kindref="member">CFF_GREATER</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175" kindref="member">cff_error_value_e</ref><sp/>{</highlight></codeline>
<codeline lineno="30" refid="caffeine__types_8h_1ga91f950d0e5ece7b55e5deafbbf7a2175af70c25cc3771bbbe73381bce31382e6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga91f950d0e5ece7b55e5deafbbf7a2175af70c25cc3771bbbe73381bce31382e6d" kindref="member">CFF_NONE_ERR</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="31" refid="caffeine__types_8h_1ga91f950d0e5ece7b55e5deafbbf7a2175a6b97868fe63114ed06d50cfaf9db7dd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga91f950d0e5ece7b55e5deafbbf7a2175a6b97868fe63114ed06d50cfaf9db7dd8" kindref="member">CFF_ALLOC_ERR</ref>,<sp/></highlight></codeline>
<codeline lineno="32" refid="caffeine__types_8h_1ga91f950d0e5ece7b55e5deafbbf7a2175ab363247f070ea03aeeb42982d4ca3e44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="caffeine__types_8h_1ga91f950d0e5ece7b55e5deafbbf7a2175ab363247f070ea03aeeb42982d4ca3e44" kindref="member">CFF_REALLOC_ERR</ref>,<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__Types_1ga2b38307e7e9df7912aa212064d1f898e" kindref="member">cff_comparer_value_e</ref><sp/><ref refid="group__Types_1ga2a069d536144f7ed422fd651850a99f1" kindref="member">cff_cmp_e</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__Types_1ga91f950d0e5ece7b55e5deafbbf7a2175" kindref="member">cff_error_value_e</ref><sp/><ref refid="group__Types_1ga42a29677c3d6f10a1fdb01da0a60e7c8" kindref="member">cff_err_e</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group__Types_1gab26febf6fafe6351c9d422a8bbbb6e5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__Types_1ga2a069d536144f7ed422fd651850a99f1" kindref="member">cff_cmp_e</ref>(*<ref refid="group__Types_1gab26febf6fafe6351c9d422a8bbbb6e5b" kindref="member">comparer_fn</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b_ptr,<sp/>uint64_t<sp/>data_size);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="group__Types_1gaf1bbe84c3e7e783d9fd976c00662334b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="group__Types_1gaf1bbe84c3e7e783d9fd976c00662334b" kindref="member">filter_fn</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>data_ptr,<sp/>uint64_t<sp/>index,<sp/>uint64_t<sp/>data_size);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="group__Types_1ga71be8e2d77fbfc376de38fef2a37f33a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(*<ref refid="group__Types_1ga71be8e2d77fbfc376de38fef2a37f33a" kindref="member">map_fn</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from_ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to_ptr,<sp/>uint64_t<sp/>index);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="group__Types_1ga80ec97ee8f8741ad8177070fbf454ac2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(*<ref refid="group__Types_1ga80ec97ee8f8741ad8177070fbf454ac2" kindref="member">foreach_fn</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_ptr,<sp/>uint64_t<sp/>index);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="headers/caffeine_types.h"/>
  </compounddef>
</doxygen>
